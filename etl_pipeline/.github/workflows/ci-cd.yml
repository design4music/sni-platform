# CI/CD Pipeline for Strategic Narrative Intelligence ETL Pipeline
# Automated testing, building, and deployment

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.11"

jobs:
  # Code quality and testing
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist coverage

    - name: Download spaCy models
      run: |
        python -m spacy download en_core_web_sm
        python -m spacy download ru_core_news_sm
        python -m spacy download de_core_news_sm
        python -m spacy download fr_core_news_sm

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check .

    - name: Import sorting check with isort
      run: |
        isort --check-only .

    - name: Type checking with mypy
      run: |
        mypy . --ignore-missing-imports

    - name: Set up test environment
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        ENVIRONMENT: testing
      run: |
        # Initialize test database
        PGPASSWORD=test_password psql -h localhost -U postgres -d test_db -c "CREATE EXTENSION IF NOT EXISTS vector;"

    - name: Run tests with coverage
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        ENVIRONMENT: testing
        SECRET_KEY: test_secret_key
      run: |
        coverage run -m pytest tests/ -v --tb=short
        coverage report --show-missing
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Security check with bandit
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          bandit-report.json

  # Build and push Docker images
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Security scanning
  security:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://etl-staging.company.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_KEY: ${{ secrets.STAGING_SSH_KEY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Install SSH key
        mkdir -p ~/.ssh
        echo "$STAGING_KEY" > ~/.ssh/staging_key
        chmod 600 ~/.ssh/staging_key
        
        # Deploy to staging server
        ssh -i ~/.ssh/staging_key -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST << 'EOF'
          cd /opt/etl-pipeline
          docker-compose pull
          docker-compose up -d --remove-orphans
          docker system prune -f
        EOF

    - name: Run staging health check
      run: |
        sleep 30  # Wait for services to start
        curl -f https://etl-staging.company.com/health || exit 1

    - name: Run staging smoke tests
      run: |
        pip install requests pytest
        python -m pytest tests/smoke/ --staging-url=https://etl-staging.company.com

  # Deploy to production
  deploy-production:
    needs: [test, build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://etl.company.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      env:
        PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
        PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
        PRODUCTION_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Install SSH key
        mkdir -p ~/.ssh
        echo "$PRODUCTION_KEY" > ~/.ssh/production_key
        chmod 600 ~/.ssh/production_key
        
        # Deploy to production server with blue-green deployment
        ssh -i ~/.ssh/production_key -o StrictHostKeyChecking=no $PRODUCTION_USER@$PRODUCTION_HOST << 'EOF'
          cd /opt/etl-pipeline
          
          # Backup current deployment
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml ps > deployment_backup.txt
          
          # Pull new images
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull
          
          # Rolling update with health checks
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans
          
          # Wait for health check
          sleep 60
          
          # Verify deployment
          curl -f http://localhost/health || (
            echo "Health check failed, rolling back..."
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml down
            # Restore previous version would go here
            exit 1
          )
          
          # Cleanup old images
          docker system prune -f
        EOF

    - name: Run production health check
      run: |
        sleep 30
        curl -f https://etl.company.com/health || exit 1

    - name: Notify deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'ETL Pipeline deployed successfully to production! :rocket:'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify deployment failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'ETL Pipeline deployment to production failed! :warning:'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance testing
  performance:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        k6 run tests/performance/load-test.js --env BASE_URL=https://etl-staging.company.com

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json

  # Database migrations
  migrate:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install alembic psycopg2-binary

    - name: Run database migrations
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        alembic upgrade head

  # Cleanup
  cleanup:
    needs: [deploy-production, performance]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Clean up old images
      run: |
        # Remove old GitHub Container Registry images (keep last 10)
        echo "Cleaning up old container images..."
        # This would use GitHub API to clean up old images

    - name: Clean up artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
        name: |
          test-results
          performance-results