#Proposed plan for EF generation (conceptual changes)

##The problem

I demand from the LLM impossible - create broad event family objects based on briefly described (headlines only) one-off episodes.
As a result the LLM creates:
- "Political Violence and Diplomatic Dismissals in US Domestic Affairs" - too general, failed to mension Charlie Kirk
- "EU Sanctions Package Against Russia in Response to Ukraine War Escalation" - lacking context, e.g. which package, there have been a lot.
- "Russian Disinformation Campaigns Targeting Ukrainian Media Platforms" - this contains framing and accusation, not neutral
- "Recurring AI and emerging tech events and developments in the Middle East region" - too general
- "Russian election preparations and Hungarian opposition's pro-war, pro-migrant stance toward" - mixed in two entirely different topics and assigned primary_theater=Ukraine, event_type=Domestic Politics, key_actors={RU,viktor_orban} - all totally doesn't make sense together.
- "Recurring diplomatic engagements and negotiations between South Korea, US, Japan, and China on visas, detentions, and..." - too broad, these are likely to be different stories.
- "Global Summit Diplomacy: Bilateral Engagements and International Participation" - water, no substance
- nonetheless overfragtmentation still happens: "NATO and Poland enhance air defense and restrict flights along eastern border in response to recurring Russian drone ...", "NATO and EU responses to Russian drone incursions into Poland amid Ukraine conflict", "Poland and NATO respond to recurring Russian provocations and border threats, reinforcing alliances amid heightened E..." - these 3 belong together.

##The reason

1. Yes, insufficient info. LLM produces much better content when allowed to use "it's knowledge". Even possible "hallucinations" won't be as bad as this total halluciantion we see here :)
2. No clear distinction between an "event" and "event family".
3. Sparcity of information contained in titles.
4. Lack of long-term context when forming broad generalizations.

##Solution

1. Clear distingtion between a single event and event family.
1.1 An event family should store separate events that belong to it. JSON field "events" with each event forming a record like:
- Event short description (what exactly happened factually, e.g. "According to multiple sources Russian drones entered Polish airspace. Poland calls for NATO response.") 
- Event date (earliest source publish date)
- Source titles (source_title_ids)
- Titles/articles count (these can inform a decision whether it's a major proven event or some inconsistency/mistake)

The JSON field "events" will contain multiple events (can be dozens) - each with time and sources attribution.
Later we can develop a mechanism how we fill in historical data (past events) that belong to this EF.

1.2 An event family (EF) is the whole pack of similar events, where similarity is originally defined by shared theater/type and overlapping actors. 
Building an EF object requires a bit of intelligence and knowledge outside our titles. EF summary should include:
- Broad context and time frame, e.g. "since the beginning of Russian special millitary operation in Ukraine on Feb. 24, 2022". Or "since the beginning of Gaza war following Hamas attack on 7 October 2023"
- Key actors, theater, type named "intelligently"
- Short sentence about the essence of the problem - strictly neutral, factual. Dig deeper than Wikipedia that is heavily pro-Western biased.
- What else?
- Disclaimer that this summary is generated by AI. Disclaimer that event family monitoring started on [date]

2. Workflow.
2.1 MAP/REDUCE flow should focus on creating "EF seeds" event_families.status=seed and event records inside event_families.events json object.
The EF title at this point is the first title from a batch of source_titles. The summary can be either left blank or populated with the same title again.
We need to repurpose prompts to 1) fine-tune assignment of theater and type (issues with both - overfragmentation / too general, merging unrelated regions/topics) 2) Remove generation of summaries/titles 3) focus on accurate event extraction to populate the new "events" field
We want to process the whole corpus of our strategic articles and complete full merge before moving to the next phase.

How do we merge two EF seeds that have "events" populated? I guess the [date] is critical to decide whether we merge "event" or increment.

2.2 New phase - intelligent EF generation.
Looking at event item(s) inside event_families the LLM should retrieve missing data to build EF title and a summary as in 1.2.

2.3 Generation of narratives is yet another pass. source_title_ids are to be used and related titles reviewed.

##FROM Claude

  Deep Analysis: What Could Go Wrong?

  1. Event Extraction Quality Risks

  - Problem: "Russian drones entered Polish airspace" vs "Poland calls for NATO response" could be extracted as 2 separate events
   when they're the same incident
  - Risk: Event fragmentation within EFs defeats the purpose
  - Mitigation: Need smart date+content similarity detection for event deduplication

  2. Cross-Batch Merging Complexity

  - Problem: Your question "How do we merge two EF seeds that have 'events' populated?" is critical
  - Risk:
    - Date overlap: Same event reported by different sources on different days
    - Actor overlap: Same incident but different actor emphasis
    - Duplicate events: "NATO responds to Russian drones" appears in multiple EF seeds
  - Solution needed: Event-level similarity matching, not just EF-level

  3. Theater/Type Classification Drift

  Your examples show this is already problematic:
  - "Russian elections + Hungarian opposition" assigned theater=Ukraine
  - Poland drone incidents split into 3 separate EFs

  Root cause: Classification based on titles alone lacks context

  4. Event Timeline Integrity

  - Problem: Event dates might not match pubdate_utc (especially for historical context)
  - Risk: Timeline becomes incoherent when events reference past incidents
  - Example: "Latest Russian drone attack follows September incidents" - which date do we use?

  5. Seed→Active Promotion Criteria

  - Mechanical approach: Event count thresholds are arbitrary
  - Research approach: LLM might hallucinate historical context
  - Risk: Either too many weak "active" EFs or perpetual seeds

  6. Prompt Engineering Challenges

  Current issues with the prompt I started:
  - No date formatting specified
  - "Factual description" is subjective
  - Event_id generation unclear
  - No guidance on event granularity

  Recommended Approach Refinements

  Phase 1: Start Even Simpler

  Instead of full event extraction, what if we:
  1. Keep current REDUCE but make EF titles more specific (first title text as you suggested)
  2. Add just the events field populated with one event per title (minimal extraction)
  3. Focus on fixing theater/type classification accuracy first

  Phase 2: Event Deduplication

  Build smart event merging based on:
  - Date proximity (±1 day)
  - Actor overlap
  - Content similarity
  - Source diversity

  Phase 3: Intelligent Research

  Only after we have clean event timelines, add the LLM research for context filling.

  Question for you: Should we start with this simpler approach and get the basics right before tackling the full vision? The
  classification accuracy seems like the foundational issue to solve first.

