# Audit Plan for Claude Code

### Phase 1: Initial Codebase Analysis
Keep this analytical - no edits yet.


"Analyze this codebase: SNI/, …/apps/, …/core/, …/db/ and create a comprehensive code quality report.
Skip the following Folders …/archive/, …/etl_pipeline/, …/docs/, …/data/, …/scripts/, …/tests/ 
Do NOT make any changes - only analyze and document findings. 
Focus on: redundancies, outdated patterns, poorly implemented code, 
and optimization opportunities."


### Phase 2: Structured Deep Dive
Break the analysis into focused areas:

**2.1 Redundancy Detection**
```
"Search the codebase for:
- Duplicate code blocks and functions
- Similar logic implemented in multiple places
- Redundant dependencies in package.json
- Duplicate utility functions across files
Document each finding with file locations and similarity percentage."
```

**2.2 Outdated Code Patterns**
```
"Identify outdated patterns such as:
- Callback-based code that should use async/await
- Old API usage that has modern alternatives
- Deprecated dependencies or methods
- Legacy patterns that have better modern equivalents
List each with the old pattern, why it's outdated, and what should replace it."
```

**2.3 Code Quality Issues**
```
"Analyze code quality focusing on:
- Functions/files that are too long or complex
- Poor separation of concerns
- Missing error handling
- Inconsistent coding styles
- Hard-coded values that should be configurable
- Missing input validation
Categorize by severity: critical, high, medium, low."
```

**2.4 Performance Optimization Opportunities**
```
"Identify performance issues:
- Inefficient algorithms or data structures
- Unnecessary re-renders or computations
- Missing memoization opportunities
- Database query optimization needs
- Bundle size optimization opportunities
Estimate potential impact for each."
```

**2.5 Architecture & Structure**
```
"Review architectural concerns:
- Circular dependencies
- Tight coupling between modules
- Missing abstraction layers
- Inconsistent file/folder organization
- Violation of SOLID principles
Suggest structural improvements."
```

### Phase 3: Generate Comprehensive Report
```
"Create a detailed CODEBASE_AUDIT_REPORT.md file that includes:

# Executive Summary
- Overall codebase health score
- Top 5 critical issues
- Estimated effort for remediation

# Detailed Findings by Category
For each issue found:
- Description and location
- Why it's problematic
- Recommended solution
- Estimated effort (hours/story points)
- Priority level

# Redundancy Report
- List of duplicate code with locations
- Consolidation recommendations

# Modernization Opportunities
- Outdated patterns with modern alternatives
- Dependencies that need updating

# Performance Optimization Plan
- Identified bottlenecks
- Proposed optimizations with expected impact

# Architecture Recommendations
- Structural improvements
- Refactoring priorities

# Action Plan
- Prioritized list of improvements
- Suggested implementation order
- Quick wins vs. long-term projects"
```

### Phase 4: Visual Metrics (Optional)
```
"Generate a CODE_METRICS.md with statistics:
- Lines of code by file/directory
- Complexity metrics
- Dependency graph analysis
- Test coverage gaps
- Documentation coverage"
```


## Expected Output

You should end up with a comprehensive markdown report that serves as your cleanup roadmap, without any code being modified. You can then review it, prioritize what matters most to your team, and come back to Claude Code later with specific implementation requests.